/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inOrder(TreeNode* root, vector<int>& tree){
        if(root == nullptr)
            return;
        inOrder(root->left, tree);
        tree.push_back(root->val);
        inOrder(root->right, tree);
    }

    vector<int> merge(vector<int>& tree1, vector<int>& tree2){
        vector<int> tree;
        int tree1Indx = 0;
        int tree2Indx = 0;

        while(tree1Indx < tree1.size() && tree2Indx < tree2.size()){
            if(tree1[tree1Indx] < tree2[tree2Indx])
                tree.push_back(tree1[tree1Indx++]);
            else
                tree.push_back(tree2[tree2Indx++]);
            
        }

        while(tree1Indx < tree1.size()){
            tree.push_back(tree1[tree1Indx++]);
        }

         while(tree2Indx < tree2.size()){
            tree.push_back(tree2[tree2Indx++]);
        }

        return tree;
    }

    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int> tree1;
        vector<int> tree2;

        inOrder(root1, tree1);
        inOrder(root2, tree2);

        return merge(tree1, tree2);
    }
};
