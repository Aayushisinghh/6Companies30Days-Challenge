class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 1; i < grid.size()-1; i++){
            for (int j = 0; j < grid[0].size()-1; j++){
                if (grid[i][j] == 0){
                    ans += dfs(grid, i, j) ? 1 : 0;
                }
            }
        }
        return ans;
    }

    bool dfs(vector<vector<int>>& g, int i, int j){
        if (i < 0 || j < 0 || i >= g.size() || j >= g[0].size()) return false;     
        if (g[i][j] == 1) return true;
        g[i][j] = 1; 
        bool up = dfs(g, i-1, j);
        bool down = dfs(g, i+1, j);
        bool left = dfs(g, i, j-1);
        bool right = dfs(g, i, j+1);
        return up && down && left && right;
    }
};
