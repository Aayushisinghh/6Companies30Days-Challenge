class Solution {
public:
    using ll = long long;
    const int M = 1e9 + 7;
    int maxSumMinProduct(vector<int> &a) {
        int n = a.size();
        vector<ll> pref;
        for(auto i : a){
            if(!pref.size())
                pref.push_back(i);
            else
                pref.push_back(pref.back() + i);
        }
        stack<int> s;
        vector<int> left(n, 1), right(n, 1);
        s.push(-1);
        s.push(0);
        for(int i = 1; i < n; ++i){
            while(s.size()>1 && a[s.top()] >= a[i])
                s.pop();
            left[i] = i - s.top();
            s.push(i);
        }
        while(s.size())
            s.pop();
        s.push(n);
        s.push(n-1);
        for(int i = n-2; i >= 0; --i){
            while(s.size()>1 && a[s.top()] > a[i])
                s.pop();
            right[i] = s.top() - i;
            s.push(i);
        }
        ll res = 0;
        for(int i = 0; i < n; ++i){
            int l = i - left[i] + 1, r = i + right[i] - 1;
            res = max(res, a[i] * (pref[r] - (l ? pref[l-1] : 0)));
        }
        return res % M;
    }
};
